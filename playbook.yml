---
- name: Basic Setup
  hosts: all
  gather_facts: false
  become: true
  tasks:
    - name: Wait 200 seconds for port 22 to become open and contain "OpenSSH"
      wait_for:
        port: 22
        host: "{{ (ansible_ssh_host|default(ansible_host))|default(inventory_hostname) }}"
        search_regex: OpenSSH
        delay: 10
        timeout: 200
      vars:
        ansible_connection: local

    - name: Set a hostname
      hostname:
        name: "{{ node_hostname }}"

    - name: Copy /etc/hosts template
      copy:
        backup: true
        src: ./files/hosts
        dest: /tmp/hosts

    - name: Insert/Update configuration using a local file and validate it
      blockinfile:
        block: "{{ lookup('file', './files/hosts') }}"
        path: /etc/hosts
        backup: yes

    - name: Disable swap on all nodes
      shell: swapoff -a

    - name: kernel module prerequesites
      shell:
        cmd: |
          cat << EOF | sudo tee /etc/modules-load.d/k8s.conf
          overlay
          br_netfilter
          EOF

    - name: add overlay module
      modprobe:
        name: overlay
        state: present

    - name: add br_netfilter module
      modprobe:
        name: br_netfilter
        state: present

    - name: sysctl params required by setup
      shell:
        cmd: |
          cat << EOF | sudo tee /etc/sysctl.d/k8s.conf
          net.bridge.bridge-nf-call-iptables  = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward                 = 1
          EOF

    - name: apply sysctl params without reboot
      shell: sysctl --system

    - name: create containerd config file
      shell: mkdir -p /etc/containerd && touch /etc/containerd/config.toml

    - name: Install containerd pre-reqs
      apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release

    - name: add docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu noble stable
        state: present

    - name: Update apt and install docker-ce
      apt:
        name: docker-ce
        state: latest
        update_cache: true

    - name: Install containerd.io
      apt:
        pkg:
          - containerd.io

    - name: Enable containerd
      systemd:
        name: containerd
        daemon_reload: yes
        state: started
        enabled: yes

    - name: Setup containerd to use systemd as cgroup
      copy:
        backup: true
        src: ./files/containerd-config.toml
        dest: /etc/containerd/config.toml

    - name: Restart service cron, in all cases, also issue daemon-reload to pick up config changes
      systemd:
        state: restarted
        daemon_reload: yes
        name: containerd

    ## NOTE: kubeadm stuff
    - name: Download Google Cloud's public key
      shell:
        cmd: |
          curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
          echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
          apt-get update

    - name: Install kubadm, kubectl, kubelet
      apt:
        pkg:
          - kubelet
          - kubeadm
          - kubectl

    - name: hold kubectl,kubeadm,kubelet packages
      shell: apt-mark hold kubelet kubectl kubeadm

    - name: Enable service kublet
      systemd:
        name: kubelet
        state: started
        enabled: yes

- name: Setup Control Plane Node
  hosts: master
  become: true
  tasks:
    - name: init kubeadm
      shell: sudo kubeadm init --pod-network-cidr=10.244.0.0/16 --control-plane-endpoint "{{ansible_host}}:6443"

    - name: create ~/.kube directory
      file:
        path: ~/.kube
        state: directory
        mode: "0755"

    - name: copy kubeconfig file
      shell: sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config

    - name: set the correct permission on kubeconfig file
      shell: sudo chown $(id -u):$(id -g) $HOME/.kube/config

    - name: install flannel
      shell: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml

    - name: Copy kubeconfig file locally
      fetch:
        src: $HOME/.kube/config
        dest: ./files/kubeconfig
        flat: yes

    - name: Generate join token for worker nodes
      shell: sudo kubeadm token create --print-join-command
      register: join_node_token

    - name: Save join command as variable
      set_fact:
        join_node: "{{ join_node_token.stdout_lines[0] }}"

- name: Setup Worker Nodes
  hosts: workers
  become: true
  tasks:
    - name: add worker nodes to cluster
      shell: "sudo {{ hostvars['control_plane'].join_node }}"
